syntax v1.0;

using "Omnius.Xeus.Engines.Models";

namespace "Omnius.Xeus.Api";

service XeusService {
    CkadMediator_GetReport: () -> (CkadMediator_GetReport_Output),
    CkadMediator_GetMyNodeProfile: () -> (CkadMediator_GetMyNodeProfile_Output),
    CkadMediator_AddCloudNodeProfiles: (CkadMediator_AddCloudNodeProfiles_Input) -> (),

    ContentExchanger_GetReport: () -> (ContentExchanger_GetReport_Output),

    DeclaredMessageExchanger_GetReport: () -> (DeclaredMessageExchanger_GetReport_Output),

    ContentPublisher_GetReport: () -> (ContentPublisher_GetReport_Output),
    ContentPublisher_PublishContent: (ContentPublisher_PublishContent_File_Input) -> (ContentPublisher_PublishContent_File_Output),
    ContentPublisher_PublishContent: (ContentPublisher_PublishContent_Memory_Input) -> (ContentPublisher_PublishContent_Memory_Output),
    ContentPublisher_UnpublishContent: (ContentPublisher_UnpublishContent_File_Input) -> (),
    ContentPublisher_UnpublishContent: (ContentPublisher_UnpublishContent_Memory_Input) -> (),

    ContentSubscriber_GetReport: () -> (ContentSubscriber_GetReport_Output),
    ContentSubscriber_SubscribeContent: (ContentSubscriber_SubscribeContent_Input) -> (),
    ContentSubscriber_UnsubscribeContent: (ContentSubscriber_UnsubscribeContent_Input) -> (),
    ContentSubscriber_ExportContent: (ContentSubscriber_ExportContent_File_Input) -> (),
    ContentSubscriber_ExportContent: (ContentSubscriber_ExportContent_Memory_Input) -> (ContentSubscriber_ExportContent_Memory_Output),

    DeclaredMessagePublisher_GetReport: () -> (DeclaredMessagePublisher_GetReport_Output),
    DeclaredMessagePublisher_PublishMessage: (DeclaredMessagePublisher_PublishMessage_Input) -> (),
    DeclaredMessagePublisher_UnpublishMessage: (DeclaredMessagePublisher_UnpublishMessage_Input) -> (),

    DeclaredMessageSubscriber_GetReport: () -> (DeclaredMessageSubscriber_GetReport_Output),
    DeclaredMessageSubscriber_SubscribeMessage: (DeclaredMessageSubscriber_SubscribeMessage_Input) -> (),
    DeclaredMessageSubscriber_UnsubscribeMessage: (DeclaredMessageSubscriber_UnsubscribeMessage_Input) -> (),
    DeclaredMessageSubscriber_ExportMessage: (DeclaredMessageSubscriber_ExportMessage_Input) -> (DeclaredMessageSubscriber_ExportMessage_Output),
}

message CkadMediator_GetReport_Output {
    Report: CkadMediatorReport,
}

message CkadMediator_GetMyNodeProfile_Output {
    NodeProfile: NodeProfile,
}

message CkadMediator_AddCloudNodeProfiles_Input {
    NodeProfiles: vector<NodeProfile>(capacity: 32),
}

message ContentExchanger_GetReport_Output {
    Report: ContentExchangerReport,
}

message DeclaredMessageExchanger_GetReport_Output {
    Report: DeclaredMessageExchangerReport,
}

message ContentPublisher_GetReport_Output {
    Report: ContentPublisherReport,
}

message ContentPublisher_PublishContent_File_Input {
    FilePath: string,
    Registrant: string,
}
message ContentPublisher_PublishContent_File_Output {
    Hash: OmniHash,
}

message ContentPublisher_PublishContent_Memory_Input {
    Memory: bytes(capacity: 32 * 1024 * 1024),
    Registrant: string,
}
message ContentPublisher_PublishContent_Memory_Output {
    Hash: OmniHash,
}

message ContentPublisher_UnpublishContent_File_Input {
    FilePath: string,
    Registrant: string,
}

message ContentPublisher_UnpublishContent_Memory_Input {
    RootHash: OmniHash,
    Registrant: string,
}

message ContentSubscriber_GetReport_Output {
    Report: ContentSubscriberReport,
}

message ContentSubscriber_SubscribeContent_Input {
    RootHash: OmniHash,
    Registrant: string,
}

message ContentSubscriber_UnsubscribeContent_Input {
    RootHash: OmniHash,
    Registrant: string,
}

message ContentSubscriber_ExportContent_File_Input {
    RootHash: OmniHash,
    FilePath: string,
}

message ContentSubscriber_ExportContent_Memory_Input {
    RootHash: OmniHash,
}

message ContentSubscriber_ExportContent_Memory_Output {
    Memory: bytes?(capacity: 32 * 1024 * 1024, recyclable: true),
}

message DeclaredMessagePublisher_GetReport_Output {
    Report: DeclaredMessagePublisherReport,
}

message DeclaredMessagePublisher_PublishMessage_Input {
    Message: DeclaredMessage,
    Registrant: string,
}

message DeclaredMessagePublisher_UnpublishMessage_Input {
    Signature: OmniSignature,
    Registrant: string,
}

message DeclaredMessageSubscriber_GetReport_Output {
    Report: DeclaredMessageSubscriberReport,
}

message DeclaredMessageSubscriber_SubscribeMessage_Input {
    Signature: OmniSignature,
    Registrant: string,
}

message DeclaredMessageSubscriber_UnsubscribeMessage_Input {
    Signature: OmniSignature,
    Registrant: string,
}

message DeclaredMessageSubscriber_ExportMessage_Input {
    Signature: OmniSignature,
}

message DeclaredMessageSubscriber_ExportMessage_Output {
    DeclaredMessage: DeclaredMessage?,
}
