// <auto-generated/>
#nullable enable

namespace Omnius.Xeus.Engines.Exchangers.Internal.Models
{
    internal enum ContentExchangerVersion : byte
    {
        Unknown = 0,
        Version1 = 1,
    }
    internal enum ContentExchangerHandshakeResultType : byte
    {
        Unknown = 0,
        Rejected = 1,
        Accepted = 2,
    }
    internal enum DeclaredMessageExchangerVersion : byte
    {
        Unknown = 0,
        Version1 = 1,
    }
    internal enum DeclaredMessageExchangerFetchResultType : byte
    {
        Unknown = 0,
        Rejected = 1,
        Found = 2,
        NotFound = 3,
        Same = 4,
    }
    internal sealed partial class Block : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>, global::System.IDisposable
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>.Empty;

        static Block()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block(global::Omnius.Core.Cryptography.OmniHash.Empty, global::Omnius.Core.MemoryOwner<byte>.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxValueLength = 4194304;

        public Block(global::Omnius.Core.Cryptography.OmniHash hash, global::System.Buffers.IMemoryOwner<byte> value)
        {
            if (value is null) throw new global::System.ArgumentNullException("value");
            if (value.Memory.Length > 4194304) throw new global::System.ArgumentOutOfRangeException("value");

            this.Hash = hash;
            _value = value;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (hash != default) ___h.Add(hash.GetHashCode());
                if (!value.Memory.IsEmpty) ___h.Add(global::Omnius.Core.Helpers.ObjectHelper.GetHashCode(value.Memory.Span));
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash Hash { get; }
        private readonly global::System.Buffers.IMemoryOwner<byte> _value;
        public global::System.ReadOnlyMemory<byte> Value => _value.Memory;

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Hash != target.Hash) return false;
            if (!global::Omnius.Core.BytesOperations.Equals(this.Value.Span, target.Value.Span)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        public void Dispose()
        {
            _value?.Dispose();
        }

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Hash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
                }
                if (!value.Value.IsEmpty)
                {
                    w.Write((uint)2);
                    w.Write(value.Value.Span);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_hash = global::Omnius.Core.Cryptography.OmniHash.Empty;
                global::System.Buffers.IMemoryOwner<byte> p_value = global::Omnius.Core.MemoryOwner<byte>.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_hash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_value = r.GetRecyclableMemory(4194304);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block(p_hash, p_value);
            }
        }
    }
    internal sealed partial class ContentExchangerHelloMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage>.Empty;

        static ContentExchangerHelloMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage(global::System.Array.Empty<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxVersionsCount = 32;

        public ContentExchangerHelloMessage(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion[] versions)
        {
            if (versions is null) throw new global::System.ArgumentNullException("versions");
            if (versions.Length > 32) throw new global::System.ArgumentOutOfRangeException("versions");

            this.Versions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion>(versions);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in versions)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion> Versions { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Versions, target.Versions)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Versions.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.Versions.Count);
                    foreach (var n in value.Versions)
                    {
                        w.Write((ulong)n);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion[] p_versions = global::System.Array.Empty<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_versions = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion[length];
                                for (int i = 0; i < p_versions.Length; i++)
                                {
                                    p_versions[i] = (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerVersion)r.GetUInt64();
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHelloMessage(p_versions);
            }
        }
    }
    internal sealed partial class ContentExchangerHandshakeRequestMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage>.Empty;

        static ContentExchangerHandshakeRequestMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage(global::Omnius.Core.Cryptography.OmniHash.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ContentExchangerHandshakeRequestMessage(global::Omnius.Core.Cryptography.OmniHash rootHash)
        {
            this.RootHash = rootHash;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (rootHash != default) ___h.Add(rootHash.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniHash RootHash { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.RootHash != target.RootHash) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.RootHash != global::Omnius.Core.Cryptography.OmniHash.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.RootHash, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_rootHash = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeRequestMessage(p_rootHash);
            }
        }
    }
    internal sealed partial class ContentExchangerHandshakeResultMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage>.Empty;

        static ContentExchangerHandshakeResultMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType)0);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public ContentExchangerHandshakeResultMessage(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType type)
        {
            this.Type = type;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (type != default) ___h.Add(type.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType Type { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Type != target.Type) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Type != (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType)0)
                {
                    w.Write((uint)1);
                    w.Write((ulong)value.Type);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType p_type = (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType)0;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_type = (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultType)r.GetUInt64();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerHandshakeResultMessage(p_type);
            }
        }
    }
    internal sealed partial class ContentExchangerDataMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage>.Empty;

        static ContentExchangerDataMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage(global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>(), global::System.Array.Empty<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxWantBlockHashesCount = 8192;
        public static readonly int MaxGiveBlocksCount = 8;

        public ContentExchangerDataMessage(global::Omnius.Core.Cryptography.OmniHash[] wantBlockHashes, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block[] giveBlocks)
        {
            if (wantBlockHashes is null) throw new global::System.ArgumentNullException("wantBlockHashes");
            if (wantBlockHashes.Length > 8192) throw new global::System.ArgumentOutOfRangeException("wantBlockHashes");
            if (giveBlocks is null) throw new global::System.ArgumentNullException("giveBlocks");
            if (giveBlocks.Length > 8) throw new global::System.ArgumentOutOfRangeException("giveBlocks");
            foreach (var n in giveBlocks)
            {
                if (n is null) throw new global::System.ArgumentNullException("n");
            }

            this.WantBlockHashes = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash>(wantBlockHashes);
            this.GiveBlocks = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>(giveBlocks);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in wantBlockHashes)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                foreach (var n in giveBlocks)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Core.Cryptography.OmniHash> WantBlockHashes { get; }
        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block> GiveBlocks { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.WantBlockHashes, target.WantBlockHashes)) return false;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.GiveBlocks, target.GiveBlocks)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.WantBlockHashes.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.WantBlockHashes.Count);
                    foreach (var n in value.WantBlockHashes)
                    {
                        global::Omnius.Core.Cryptography.OmniHash.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                if (value.GiveBlocks.Count != 0)
                {
                    w.Write((uint)2);
                    w.Write((uint)value.GiveBlocks.Count);
                    foreach (var n in value.GiveBlocks)
                    {
                        global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block.Formatter.Serialize(ref w, n, rank + 1);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniHash[] p_wantBlockHashes = global::System.Array.Empty<global::Omnius.Core.Cryptography.OmniHash>();
                global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block[] p_giveBlocks = global::System.Array.Empty<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_wantBlockHashes = new global::Omnius.Core.Cryptography.OmniHash[length];
                                for (int i = 0; i < p_wantBlockHashes.Length; i++)
                                {
                                    p_wantBlockHashes[i] = global::Omnius.Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                        case 2:
                            {
                                var length = r.GetUInt32();
                                p_giveBlocks = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block[length];
                                for (int i = 0; i < p_giveBlocks.Length; i++)
                                {
                                    p_giveBlocks[i] = global::Omnius.Xeus.Engines.Exchangers.Internal.Models.Block.Formatter.Deserialize(ref r, rank + 1);
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.ContentExchangerDataMessage(p_wantBlockHashes, p_giveBlocks);
            }
        }
    }
    internal sealed partial class DeclaredMessageExchangerHelloMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage>.Empty;

        static DeclaredMessageExchangerHelloMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage(global::System.Array.Empty<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion>());
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public static readonly int MaxVersionsCount = 32;

        public DeclaredMessageExchangerHelloMessage(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion[] versions)
        {
            if (versions is null) throw new global::System.ArgumentNullException("versions");
            if (versions.Length > 32) throw new global::System.ArgumentOutOfRangeException("versions");

            this.Versions = new global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion>(versions);

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                foreach (var n in versions)
                {
                    if (n != default) ___h.Add(n.GetHashCode());
                }
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Collections.ReadOnlyListSlim<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion> Versions { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (!global::Omnius.Core.Helpers.CollectionHelper.Equals(this.Versions, target.Versions)) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Versions.Count != 0)
                {
                    w.Write((uint)1);
                    w.Write((uint)value.Versions.Count);
                    foreach (var n in value.Versions)
                    {
                        w.Write((ulong)n);
                    }
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion[] p_versions = global::System.Array.Empty<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion>();

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                var length = r.GetUInt32();
                                p_versions = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion[length];
                                for (int i = 0; i < p_versions.Length; i++)
                                {
                                    p_versions[i] = (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerVersion)r.GetUInt64();
                                }
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerHelloMessage(p_versions);
            }
        }
    }
    internal sealed partial class DeclaredMessageExchangerFetchRequestMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage>.Empty;

        static DeclaredMessageExchangerFetchRequestMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage(global::Omnius.Core.Cryptography.OmniSignature.Empty, global::Omnius.Core.RocketPack.Timestamp.Zero);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public DeclaredMessageExchangerFetchRequestMessage(global::Omnius.Core.Cryptography.OmniSignature signature, global::Omnius.Core.RocketPack.Timestamp creationTime)
        {
            if (signature is null) throw new global::System.ArgumentNullException("signature");
            this.Signature = signature;
            this.CreationTime = creationTime;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (signature != default) ___h.Add(signature.GetHashCode());
                if (creationTime != default) ___h.Add(creationTime.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Core.Cryptography.OmniSignature Signature { get; }
        public global::Omnius.Core.RocketPack.Timestamp CreationTime { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Signature != target.Signature) return false;
            if (this.CreationTime != target.CreationTime) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Signature != global::Omnius.Core.Cryptography.OmniSignature.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Core.Cryptography.OmniSignature.Formatter.Serialize(ref w, value.Signature, rank + 1);
                }
                if (value.CreationTime != global::Omnius.Core.RocketPack.Timestamp.Zero)
                {
                    w.Write((uint)2);
                    w.Write(value.CreationTime);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Core.Cryptography.OmniSignature p_signature = global::Omnius.Core.Cryptography.OmniSignature.Empty;
                global::Omnius.Core.RocketPack.Timestamp p_creationTime = global::Omnius.Core.RocketPack.Timestamp.Zero;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_signature = global::Omnius.Core.Cryptography.OmniSignature.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                        case 2:
                            {
                                p_creationTime = r.GetTimestamp();
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchRequestMessage(p_signature, p_creationTime);
            }
        }
    }
    internal sealed partial class DeclaredMessageExchangerFetchResultMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage>.Empty;

        static DeclaredMessageExchangerFetchResultMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType)0, null);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public DeclaredMessageExchangerFetchResultMessage(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType type, global::Omnius.Xeus.Engines.Models.DeclaredMessage? declaredMessage)
        {
            this.Type = type;
            this.DeclaredMessage = declaredMessage;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (type != default) ___h.Add(type.GetHashCode());
                if (declaredMessage != default) ___h.Add(declaredMessage.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType Type { get; }
        public global::Omnius.Xeus.Engines.Models.DeclaredMessage? DeclaredMessage { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.Type != target.Type) return false;
            if ((this.DeclaredMessage is null) != (target.DeclaredMessage is null)) return false;
            if ((this.DeclaredMessage is not null) && (target.DeclaredMessage is not null) && this.DeclaredMessage != target.DeclaredMessage) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.Type != (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType)0)
                {
                    w.Write((uint)1);
                    w.Write((ulong)value.Type);
                }
                if (value.DeclaredMessage != null)
                {
                    w.Write((uint)2);
                    global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Serialize(ref w, value.DeclaredMessage, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType p_type = (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType)0;
                global::Omnius.Xeus.Engines.Models.DeclaredMessage? p_declaredMessage = null;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_type = (global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultType)r.GetUInt64();
                                break;
                            }
                        case 2:
                            {
                                p_declaredMessage = global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerFetchResultMessage(p_type, p_declaredMessage);
            }
        }
    }
    internal sealed partial class DeclaredMessageExchangerPostMessage : global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage>
    {
        public static global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage> Formatter => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage>.Formatter;
        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage Empty => global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage>.Empty;

        static DeclaredMessageExchangerPostMessage()
        {
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage>.Formatter = new ___CustomFormatter();
            global::Omnius.Core.RocketPack.IRocketPackObject<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage>.Empty = new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage(global::Omnius.Xeus.Engines.Models.DeclaredMessage.Empty);
        }

        private readonly global::System.Lazy<int> ___hashCode;

        public DeclaredMessageExchangerPostMessage(global::Omnius.Xeus.Engines.Models.DeclaredMessage declaredMessage)
        {
            if (declaredMessage is null) throw new global::System.ArgumentNullException("declaredMessage");

            this.DeclaredMessage = declaredMessage;

            ___hashCode = new global::System.Lazy<int>(() =>
            {
                var ___h = new global::System.HashCode();
                if (declaredMessage != default) ___h.Add(declaredMessage.GetHashCode());
                return ___h.ToHashCode();
            });
        }

        public global::Omnius.Xeus.Engines.Models.DeclaredMessage DeclaredMessage { get; }

        public static global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.IBytesPool bytesPool)
        {
            var reader = new global::Omnius.Core.RocketPack.RocketPackObjectReader(sequence, bytesPool);
            return Formatter.Deserialize(ref reader, 0);
        }
        public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.IBytesPool bytesPool)
        {
            var writer = new global::Omnius.Core.RocketPack.RocketPackObjectWriter(bufferWriter, bytesPool);
            Formatter.Serialize(ref writer, this, 0);
        }

        public static bool operator ==(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage? right)
        {
            return (right is null) ? (left is null) : right.Equals(left);
        }
        public static bool operator !=(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage? left, global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage? right)
        {
            return !(left == right);
        }
        public override bool Equals(object? other)
        {
            if (other is not global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage) return false;
            return this.Equals((global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage)other);
        }
        public bool Equals(global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage? target)
        {
            if (target is null) return false;
            if (object.ReferenceEquals(this, target)) return true;
            if (this.DeclaredMessage != target.DeclaredMessage) return false;

            return true;
        }
        public override int GetHashCode() => ___hashCode.Value;

        private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketPackObjectFormatter<global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage>
        {
            public void Serialize(ref global::Omnius.Core.RocketPack.RocketPackObjectWriter w, in global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage value, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                if (value.DeclaredMessage != global::Omnius.Xeus.Engines.Models.DeclaredMessage.Empty)
                {
                    w.Write((uint)1);
                    global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Serialize(ref w, value.DeclaredMessage, rank + 1);
                }
                w.Write((uint)0);
            }
            public global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketPackObjectReader r, in int rank)
            {
                if (rank > 256) throw new global::System.FormatException();

                global::Omnius.Xeus.Engines.Models.DeclaredMessage p_declaredMessage = global::Omnius.Xeus.Engines.Models.DeclaredMessage.Empty;

                for (; ; )
                {
                    uint id = r.GetUInt32();
                    if (id == 0) break;
                    switch (id)
                    {
                        case 1:
                            {
                                p_declaredMessage = global::Omnius.Xeus.Engines.Models.DeclaredMessage.Formatter.Deserialize(ref r, rank + 1);
                                break;
                            }
                    }
                }

                return new global::Omnius.Xeus.Engines.Exchangers.Internal.Models.DeclaredMessageExchangerPostMessage(p_declaredMessage);
            }
        }
    }
}
